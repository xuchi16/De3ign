#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["floor", "SFX", "Floors", "Walls", "Ceiling", "breakablefloor", "Outdoor", "StaticFurniture", "Interactable", "MovableItems", "SkyDome_1", "DUMMY", "invis"]
    float3 xformOp:scale = (0.2, 0.2, 0.2)
    float3 xformOp:translate = (3.7252903e-9, 7.450581e-9, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cube "floor" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/floor/DefaultMaterial>
        double size = 0.2
        float3 xformOp:scale = (100, 3, 100)
        float3 xformOp:translate = (0, -0.2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @2145.jpg@
                float2 inputs:st.connect = </Root/floor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.3, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }

    def "SkyDome_1" (
        active = true
        references = @WhiteMyth/model/SkyDome.usdz@
    )
    {
        reorder nameChildren = ["Dome_01", "Ground_01", "Cube", "Grid", "Looks"]
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, -1.5, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Looks"
        {
            over "DomeMATSG"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @nightsky.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Looks/DomeMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Looks/DomeMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                over "DomeMAT"
                {
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Looks/DomeMATSG/diffuseColor.outputs:rgb>
                }
            }

            over "GroundMATSG"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @snowland.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Looks/GroundMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Looks/GroundMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                over "GroundMAT"
                {
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Looks/GroundMATSG/diffuseColor.outputs:rgb>
                }
            }

            over "GridMATSG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        over "Grid" (
            active = false
        )
        {
        }

        over "Ground_01" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/StaticFurniture/Computer_Desk/Materials/Wood> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        def Cube "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/SkyDome_1/Cube/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (0.99999994, 0, 0, 0)
            float3 xformOp:scale = (5000, 0.99999994, 5000)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/SkyDome_1/Cube/DefaultMaterial/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SkyDome_1/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (101.607185, 92.69889)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 18

                def Shader "DefaultSurfaceShader" (
                    active = false
                )
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Cube/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @snowland.jpg@
                    float2 inputs:st.connect = </Root/SkyDome_1/Cube/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome_1/Cube/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = </Root/SkyDome_1/Cube/DefaultMaterial/Image.outputs:out>
                    float inputs:metallic
                    float inputs:opacity
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-197.47266, 98.44141)
                    int ui:nodegraph:node:stackingOrder = 8
                }

                def Shader "Transform2D"
                {
                    uniform token info:id = "ND_UsdTransform2d"
                    float2 inputs:in = (1, 1)
                    float2 inputs:in.connect = </Root/SkyDome_1/Cube/DefaultMaterial/TextureCoordinates.outputs:out>
                    float inputs:rotation
                    float2 inputs:scale = (3, 3)
                    float2 inputs:translation
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-725.02515, 131.25093)
                    int ui:nodegraph:node:stackingOrder = 58
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    color3f inputs:default
                    asset inputs:file = @WhiteMyth/texture/snowland.jpg@
                    string inputs:filtertype
                    float2 inputs:texcoord.connect = </Root/SkyDome_1/Cube/DefaultMaterial/Transform2D.outputs:out>
                    string inputs:uaddressmode
                    string inputs:vaddressmode
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-511.13425, 54.64789)
                    int ui:nodegraph:node:stackingOrder = 59
                }

                def Shader "TextureCoordinates"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-933.6737, 135.97092)
                    int ui:nodegraph:node:stackingOrder = 44
                }
            }
        }
    }

    def Xform "Floors" (
        active = true
    )
    {
        reorder nameChildren = ["floor_1", "floor_2", "floor_3", "floor_4", "floor_5"]
        def Cube "floor_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floors/floor_1/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (-124.29317, 152.6477)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 5, 42.5)
            float3 xformOp:translate = (-8.2887715e-7, -0.39999998, -5.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floors/floor_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/Floors/floor_1/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @WhiteMyth/texture/floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Floors/floor_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Floors/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.21, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                float linearDamping = 0.02
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0, 0, 0)
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.6
                    double staticFriction = 0.6
                }
            }
        }

        def Cube "floor_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floors/floor_2/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (-104.29317, 172.6477)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (105, 5, 42.5)
            float3 xformOp:translate = (-0.49999997, -0.39999998, 5.750001)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floors/floor_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/Floors/floor_2/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @WhiteMyth/texture/floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Floors/floor_2/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Floors/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.21, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                float linearDamping = 0.02
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0, 0, 0)
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.6
                    double staticFriction = 0.6
                }
            }
        }

        def Cube "floor_3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Floors/floor_3/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (-84.29317, 192.6477)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (37.5, 5, 45)
            float3 xformOp:translate = (-6.25, -0.40009996, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floors/floor_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/Floors/floor_3/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @WhiteMyth/texture/floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Floors/floor_3/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Floors/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.21, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                float linearDamping = 0.02
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0, 0, 0)
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.6
                    double staticFriction = 0.6
                }
            }
        }

        def Cube "floor_4" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["floor_5", "DefaultMaterial", "Collider", "RigidBody"]
            rel material:binding = </Root/Floors/floor_4/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (-84.29317, 192.6477)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (47.5, 5, 45)
            float3 xformOp:translate = (5.2499995, -0.40009996, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floors/floor_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/Floors/floor_4/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @WhiteMyth/texture/floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Floors/floor_4/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Floors/floor_4/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.21, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                float linearDamping = 0.02
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0, 0, 0)
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.6
                    double staticFriction = 0.6
                }
            }
        }

        def Cube "floor_5" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["breakablefloor", "DefaultMaterial", "Collider", "RigidBody"]
            rel material:binding = </Root/Floors/floor_5/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (-64.29317, 212.6477)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (20, 1.9999999, 20)
            float3 xformOp:translate = (-0.99999994, -1.0999999, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Floors/floor_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.082469255, 0.082469255, 0.082469255) (
                        colorSpace = "lin_srgb"
                    )
                    color3f inputs:diffuseColor.connect = </Root/Floors/floor_5/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @Snow004_2K-JPG_Roughness.jpg@
                    float2 inputs:st.connect = </Root/Floors/floor_5/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Floors/floor_5/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.21, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                float linearDamping = 0.02
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0, 0, 0)
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.6
                    double staticFriction = 0.6
                }
            }
        }
    }

    def Xform "Outdoor" (
        active = true
    )
    {
        reorder nameChildren = ["fences", "Pine_tree", "Pine_tree_1", "Rock", "Rock_1"]
        float3 xformOp:translate = (0.000010188671, 0.000010170044, 55.23575)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "fences" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.52359885, 0)
            }
        )
        {
            reorder nameChildren = ["Fence_Wood", "Fence_Wood_1", "Fence_Wood_2", "Fence_Wood_3", "Fence_Wood_4", "Fence_Wood_5", "Fence_Wood_6", "Fence_Wood_7"]
            quatf xformOp:orient = (0.96592575, 0, 0.25881913, 0)
            float3 xformOp:scale = (1, 0.99999994, 1)
            float3 xformOp:translate = (-4.623198, -0.000010356307, -11.890537)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Fence_Wood" (
                active = false
                customData = {
                    float3 rotationEulerHint = (0, 2.0124054, 0)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                quatf xformOp:orient = (0.53507245, 0, 0.8448062, 0)
                float3 xformOp:scale = (0.029999997, 0.03, 0.029999997)
                float3 xformOp:translate = (37.52183, -2.001231, 21.523273)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_1" (
                active = false
                customData = {
                    float3 rotationEulerHint = (0, 1.6532104, 2.3841858e-7)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-126.125, 109)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (0.67737734, -8.7694616e-8, 0.73563576, 8.0749665e-8)
                float3 xformOp:scale = (0.03, 0.029999996, 0.03)
                float3 xformOp:translate = (28.147345, -2.0012345, 28.483654)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 1.4221586, 0)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-106.125, 129)
                int ui:nodegraph:node:stackingOrder = 2
                quatf xformOp:orient = (0.75765795, 0, 0.65265185, 0)
                float3 xformOp:scale = (0.030000003, 0.06, 0.030000003)
                float3 xformOp:translate = (17.102962, -2.0012357, 32.459953)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_3" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 1.0809104, -6.333842e-8)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-106.125, 129)
                int ui:nodegraph:node:stackingOrder = 2
                quatf xformOp:orient = (0.8574745, 1.6294646e-8, 0.5145264, -2.7155536e-8)
                float3 xformOp:scale = (0.030000005, 0.030000001, 0.030000003)
                float3 xformOp:translate = (5.4973917, -2.0012333, 33.16199)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_4" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0.7924502, -1.0611808e-8)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-86.125, 149)
                int ui:nodegraph:node:stackingOrder = 3
                quatf xformOp:orient = (0.92252445, 2.0477535e-9, 0.38593864, -4.8948268e-9)
                float3 xformOp:scale = (0.03, 0.030000001, 0.030000001)
                float3 xformOp:translate = (-5.762208, -2.0012333, 30.10804)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_5" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-2.5552888e-16, 0.5176977, 8.574125e-9)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-86.125, 149)
                int ui:nodegraph:node:stackingOrder = 3
                quatf xformOp:orient = (0.9666853, -1.0973502e-9, 0.25596783, 4.14424e-9)
                float3 xformOp:scale = (0.030000001, 0.06, 0.030000005)
                float3 xformOp:translate = (-15.719426, -2.0012357, 23.98051)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_6" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0.26861027, -3.8638452e-9)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-66.125, 169)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (0.99099463, 2.5868754e-10, 0.1339016, -1.9145237e-9)
                float3 xformOp:scale = (0.030000001, 0.030000001, 0.030000003)
                float3 xformOp:translate = (-23.843348, -2.0012333, 15.528656)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }

            def "Fence_Wood_7" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, -0.0552042, 0)
                }
                references = @WhiteMyth/model/Fence_Wood.usdz@
            )
            {
                float2 ui:nodegraph:node:pos = (-66.125, 169)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (0.99961907, 0, -0.027599307, 0)
                float3 xformOp:scale = (0.030000003, 0.06, 0.03)
                float3 xformOp:translate = (-29.157274, -2.0012357, 5.2316895)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Meshes"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (100, 100, 100)
                    float3 xformOp:translate = (-77.82545, 0, -176.02266)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "Sketchfab_model"
                    {
                        over "fence_obj_cleaner_gles"
                        {
                            over "Object_2"
                            {
                                over "Object_0"
                                {
                                    float3 xformOp:scale = (1, 1, 1)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }
                            }
                        }
                    }
                }
            }
        }

        def "Pine_tree" (
            active = true
            references = @WhiteMyth/model/Pine_tree.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.04999999, 0.04999999, 0.04999999)
            float3 xformOp:translate = (-47.281662, -2.0000105, -1.1368752)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Pine_tree_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @WhiteMyth/model/Pine_tree.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-126.125, 109)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.04999999, 0.04999999, 0.04999999)
            float3 xformOp:translate = (26.298637, -5.8703, 62.748295)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Rock" (
            active = true
            references = @WhiteMyth/model/Rock.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.07, 0.07, 0.07)
            float3 xformOp:translate = (20.21821, -0.7781948, 55.211063)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Rock_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 2.6783545, 0)
            }
            references = @WhiteMyth/model/Rock.usdz@
        )
        {
            quatf xformOp:orient = (0.22955355, 0, 0.97329605, 0)
            float3 xformOp:scale = (0.1, 0.1, 0.120000005)
            float3 xformOp:translate = (32.349667, 2.0632548, -17.265877)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Cube "breakablefloor" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/breakablefloor/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (14.999999, 1, 14.999999)
        float3 xformOp:translate = (-1.0000004, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/breakablefloor/DefaultMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/breakablefloor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (353.6982, 108.94482)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 28

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/breakablefloor/DefaultMaterial/diffuseColor.outputs:rgb>
                normal3f inputs:normal = (0, 0, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floormaterial.jpg@
                float2 inputs:st.connect = </Root/breakablefloor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/breakablefloor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "PreviewSurface" (
                active = true
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Root/breakablefloor/DefaultMaterial/HSVAdjust.outputs:out>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic
                float3 inputs:normal
                float inputs:occlusion
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (105.480736, 113.68064)
                int ui:nodegraph:node:stackingOrder = 93
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                color3f inputs:default
                asset inputs:file = @WhiteMyth/texture/floormaterial.jpg@
                string inputs:filtertype
                float2 inputs:texcoord.connect = </Root/breakablefloor/DefaultMaterial/Transform2D.outputs:out>
                string inputs:uaddressmode
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-381.6375, 103.07825)
                int ui:nodegraph:node:stackingOrder = 119
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "inputs:texcoord"]
            }

            def Shader "Transform2D"
            {
                uniform token info:id = "ND_UsdTransform2d"
                float2 inputs:in.connect = </Root/breakablefloor/DefaultMaterial/TextureCoordinates.outputs:out>
                float inputs:rotation
                float2 inputs:scale = (0.5, 0.33)
                float2 inputs:translation = (0, -0.002)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-602.2608, 137.07855)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "TextureCoordinates"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-841.69653, 108.06333)
                int ui:nodegraph:node:stackingOrder = 74
            }

            def Shader "HSVAdjust"
            {
                uniform token info:id = "ND_hsvadjust_color3"
                float3 inputs:amount = (360, 1, 1)
                color3f inputs:in.connect = </Root/breakablefloor/DefaultMaterial/Image.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-100.522606, 104.85935)
                int ui:nodegraph:node:stackingOrder = 118
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 1
            bool lockRotationX = 1
            bool lockRotationY = 1
            bool lockRotationZ = 1
            bool lockTranslationX = 1
            bool lockTranslationY = 1
            bool lockTranslationZ = 1
            token motionType = "Static"

            def RealityKitStruct "massFrame"
            {
                float m_mass = 0.001

                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
                double dynamicFriction = 0.6
                double staticFriction = 0.6
            }
        }

        def RealityKitComponent "AudioLibrary"
        {
            uniform token info:id = "RealityKit.AudioLibrary"

            def RealityKitDict "resources"
            {
                string[] keys = ["crack"]
                rel values = </Root/SFX/crack_wav>
            }
        }
    }

    def Xform "Walls" (
        active = true
    )
    {
        reorder nameChildren = ["WoodPlank", "wall1_9", "SmoothConcrete", "NaturalCork", "Material", "wall1", "wall1_1", "wall1_2", "wall1_3", "wall1_4", "wall1_5", "wall1_6", "wall1_7", "wall1_8"]
        def Cube "wall1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.99999994, 100, 100)
            float3 xformOp:translate = (10, 8.999999, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.99999994, 100, 10)
            float3 xformOp:translate = (-10, 8.999999, 8.817832)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 100, 0.99999994)
            float3 xformOp:translate = (11.01258, 8.999999, 10)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (60, 60)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 100, 0.99999994)
            float3 xformOp:translate = (0, 8.999999, -10)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (60, 60)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 100, 0.99999994)
            float3 xformOp:translate = (-13.473053, 8.999999, 10)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_4/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (80, 80)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 100, 0.99999994)
            float3 xformOp:translate = (-1.9351978, 20.751648, 10.0001)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_5/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (100, 100)
            int ui:nodegraph:node:stackingOrder = 5
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (40, 40, 0.99999994)
            float3 xformOp:translate = (-1.9351851, 0.9265346, 10.0001)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }
        }

        def Cube "wall1_7" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.99999994, 100, 100)
            float3 xformOp:translate = (-10, 8.999999, -7.759334)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Walls/wall1_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }
        }

        def Cube "wall1_8" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
        )
        {
            reorder nameChildren = ["DefaultMaterial", "RigidBody", "Collider"]
            rel material:binding = </Root/Walls/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (100, 100)
            int ui:nodegraph:node:stackingOrder = 5
            quatf xformOp:orient = (0.7071067, 0, 0.7071068, 0)
            float3 xformOp:scale = (39.999992, 59.999996, 0.9999999)
            float3 xformOp:translate = (-10.0001, 18.168121, 5.487335)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Walls/wall1_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 0
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }
        }

        def Material "Material" (
            references = None
        )
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface.connect = </Root/Walls/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Walls/Material/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
            }

            def Shader "UsdPreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
                color3f inputs:diffuseColor.connect = </Root/Walls/Material/diffuseColor.outputs:rgb>
                token outputs:surface
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @WhiteMyth/texture/abstract-gray-concrete-wall-background.jpg@
                float2 inputs:st.connect = </Root/Walls/Material/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/Walls/Material.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def "SmoothConcrete" (
            active = true
            references = @WhiteMyth/material/SmoothConcrete.usdz@
        )
        {
        }

        def "NaturalCork" (
            active = true
            references = @WhiteMyth/material/NaturalCork.usdz@
        )
        {
        }

        def "WoodPlank" (
            active = true
            references = @WhiteMyth/material/WoodPlank.usdz@
        )
        {
        }
    }

    def Scope "StaticFurniture" (
        active = true
    )
    {
        reorder nameChildren = ["ikea_bed", "Old_Bed", "Computer_Desk", "Poster_Basic__Low_Poly", "Picture_Frame", "Picture_Frame_1", "Picture_Frame_2", "Indoor_Plant_with_pot_a", "Snacksinabox"]
        def "ikea_bed" (
            active = false
            references = @WhiteMyth/model/ikea_bed.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes", "Collider"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.06, 0.06, 0.06)
            float3 xformOp:translate = (3.892454, -0.024834825, 2.573936)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (126.256676, 20, 206.99997)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (48.63963, 55.999992, -103.499985)
                    }
                }
            }
        }

        def "Computer_Desk" (
            active = true
            references = @WhiteMyth/model/Computer_Desk.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.018, 0.018, 0.018)
            float3 xformOp:translate = (-1.3462317, 4.935238, -7.674088)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "Root"
                    {
                        over "Cube"
                        {
                            over "Cube_0"
                            {
                                over "Cube_0"
                                {
                                }
                            }

                            def RealityKitComponent "RigidBody"
                            {
                                bool gravityEnabled = 0
                                uniform token info:id = "RealityKit.RigidBody"
                                bool lockRotationX = 1
                                bool lockRotationY = 1
                                bool lockRotationZ = 1
                                bool lockTranslationX = 1
                                bool lockTranslationY = 1
                                bool lockTranslationZ = 1
                                token motionType = "Static"

                                def RealityKitStruct "massFrame"
                                {
                                    def RealityKitStruct "m_pose"
                                    {
                                    }
                                }

                                def RealityKitStruct "material"
                                {
                                    double dynamicFriction = 0.4
                                    double staticFriction = 0.4
                                }
                            }

                            def RealityKitComponent "Collider"
                            {
                                uint group = 1
                                uniform token info:id = "RealityKit.Collider"
                                uint mask = 4294967295
                                token type = "Default"

                                def RealityKitStruct "Shape"
                                {
                                    float3 extent = (4.8, 2.6, 0.1)
                                    token shapeType = "Box"

                                    def RealityKitStruct "pose"
                                    {
                                    }
                                }
                            }
                        }

                        over "Cube_002"
                        {
                            def RealityKitComponent "RigidBody"
                            {
                                bool gravityEnabled = 0
                                uniform token info:id = "RealityKit.RigidBody"
                                bool lockRotationX = 1
                                bool lockRotationY = 1
                                bool lockRotationZ = 1
                                bool lockTranslationX = 1
                                bool lockTranslationY = 1
                                bool lockTranslationZ = 1
                                token motionType = "Static"

                                def RealityKitStruct "massFrame"
                                {
                                    def RealityKitStruct "m_pose"
                                    {
                                    }
                                }

                                def RealityKitStruct "material"
                                {
                                    double dynamicFriction = 0.6
                                    double staticFriction = 0.6
                                }
                            }

                            def RealityKitComponent "Collider"
                            {
                                uint group = 1
                                uniform token info:id = "RealityKit.Collider"
                                uint mask = 4294967295
                                token type = "Default"

                                def RealityKitStruct "Shape"
                                {
                                    float3 extent = (0.1, 2.6, 2.88)
                                    token shapeType = "Box"

                                    def RealityKitStruct "pose"
                                    {
                                    }
                                }
                            }
                        }

                        over "Cube_001"
                        {
                            def RealityKitComponent "RigidBody"
                            {
                                bool gravityEnabled = 0
                                uniform token info:id = "RealityKit.RigidBody"
                                bool lockRotationX = 1
                                bool lockRotationY = 1
                                bool lockRotationZ = 1
                                bool lockTranslationX = 1
                                bool lockTranslationY = 1
                                bool lockTranslationZ = 1
                                token motionType = "Static"

                                def RealityKitStruct "massFrame"
                                {
                                    def RealityKitStruct "m_pose"
                                    {
                                    }
                                }

                                def RealityKitStruct "material"
                                {
                                    double dynamicFriction = 0.6
                                    double staticFriction = 0.6
                                }
                            }

                            def RealityKitComponent "Collider"
                            {
                                uint group = 1
                                uniform token info:id = "RealityKit.Collider"
                                uint mask = 4294967295
                                token type = "Default"

                                def RealityKitStruct "Shape"
                                {
                                    float3 extent = (0.1, 2.6, 2.88)
                                    token shapeType = "Box"

                                    def RealityKitStruct "pose"
                                    {
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "Materials"
            {
                over "Wood"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }
        }

        def "Poster_Basic__Low_Poly" (
            active = true
            references = @WhiteMyth/model/Poster_Basic__Low_Poly.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.016, 0.008, 0.008)
            float3 xformOp:translate = (-2.0181386, 6.653496, -9.891981)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                over "Paper_Material"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor.connect = </Root/StaticFurniture/Poster_Basic__Low_Poly/Materials/Paper_Material/diffuseColor.outputs:rgb>
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/binarytable.png@
                        float2 inputs:st.connect = </Root/StaticFurniture/Poster_Basic__Low_Poly/Materials/Paper_Material/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Poster_Basic__Low_Poly/Materials/Paper_Material.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }

                over "Material_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "da03915a871f41d8bf8134affa9a6448_fbx"
                    {
                        over "RootNode"
                        {
                            over "Tape_L"
                            {
                                quatf xformOp:orient = (0.65447104, -0.65447104, -0.26770815, -0.26770812)
                                float3 xformOp:scale = (20, 10.582916, 125)
                                float3 xformOp:translate = (-150.5843, 0.7531739, 111.93383)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "Tape_R"
                            {
                                quatf xformOp:orient = (-0.32764134, 0.32764134, 0.62661886, 0.62661886)
                                float3 xformOp:scale = (20, 10.5824995, 125)
                                float3 xformOp:translate = (-152.2477, 3.2272952, -112.55375)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }
        }

        def "Picture_Frame" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 3.1415927, 0)
            }
            references = @WhiteMyth/model/Picture_Frame.usdz@
        )
        {
            reorder nameChildren = ["picture", "Materials", "Meshes"]
            quatf xformOp:orient = (-4.3711395e-8, 0, 1, 0)
            float3 xformOp:scale = (0.009999999, 0.009999999, 0.009999999)
            float3 xformOp:translate = (9.949999, 6.8, -4.2999997)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                over "_D_Oak___Semigloss_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                    }
                }

                over "_D_Oak___Semigloss_004"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @hint1.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "back_panel_001_2"
                            {
                            }

                            over "frame_001_3"
                            {
                            }
                        }
                    }
                }
            }

            def Cube "picture" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 3.1415918, 0)
                }
            )
            {
                rel material:binding = </Root/StaticFurniture/Picture_Frame/picture/DefaultMaterial>
                double size = 0.2
                quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
                float3 xformOp:scale = (10, 1262, 962)
                float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/StaticFurniture/Picture_Frame/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                            colorSpace = "lin_srgb"
                        )
                        color3f inputs:diffuseColor.connect = </Root/StaticFurniture/Picture_Frame/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/hint1.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }
        }

        def "Picture_Frame_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 3.1415927, 0)
            }
            references = @WhiteMyth/model/Picture_Frame.usdz@
        )
        {
            reorder nameChildren = ["picture", "Materials", "Meshes"]
            float2 ui:nodegraph:node:pos = (-126.125, 109)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (-4.3711395e-8, 0, 1, 0)
            float3 xformOp:scale = (0.009999999, 0.009999999, 0.009999999)
            float3 xformOp:translate = (9.949999, 6.8, -0.3)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                over "_D_Oak___Semigloss_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                    }
                }

                over "_D_Oak___Semigloss_004"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @hint1.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame_1/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame_1/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "back_panel_001_2"
                            {
                            }

                            over "frame_001_3"
                            {
                            }
                        }
                    }
                }
            }

            def Cube "picture" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 3.1415918, 0)
                }
            )
            {
                rel material:binding = </Root/StaticFurniture/Picture_Frame_1/picture/DefaultMaterial>
                double size = 0.2
                quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
                float3 xformOp:scale = (10, 1262, 962)
                float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/StaticFurniture/Picture_Frame_1/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                            colorSpace = "lin_srgb"
                        )
                        color3f inputs:diffuseColor.connect = </Root/StaticFurniture/Picture_Frame_1/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/hint2.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame_1/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame_1/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }
        }

        def "Picture_Frame_2" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 3.1415927, 0)
            }
            references = @WhiteMyth/model/Picture_Frame.usdz@
        )
        {
            reorder nameChildren = ["picture", "Materials", "Meshes"]
            float2 ui:nodegraph:node:pos = (-106.125, 129)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (-4.3711395e-8, 0, 1, 0)
            float3 xformOp:scale = (0.009999999, 0.009999999, 0.009999999)
            float3 xformOp:translate = (9.949999, 6.8, 3.6999998)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                over "_D_Oak___Semigloss_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor = (0.5191068, 0.24338968, 0.04391877)
                    }
                }

                over "_D_Oak___Semigloss_004"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @hint1.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame_2/Materials/_D_Oak___Semigloss_004/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame_2/Materials/_D_Oak___Semigloss_004.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "back_panel_001_2"
                            {
                            }

                            over "frame_001_3"
                            {
                            }
                        }
                    }
                }
            }

            def Cube "picture" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 3.1415918, 0)
                }
            )
            {
                rel material:binding = </Root/StaticFurniture/Picture_Frame_2/picture/DefaultMaterial>
                double size = 0.2
                quatf xformOp:orient = (3.1391647e-7, 0, 1, 0)
                float3 xformOp:scale = (10, 1262, 962)
                float3 xformOp:translate = (5.505371, 149.79724, 120.100006)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/StaticFurniture/Picture_Frame_2/picture/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 0.40577167, 1) (
                            colorSpace = "lin_srgb"
                        )
                        color3f inputs:diffuseColor.connect = </Root/StaticFurniture/Picture_Frame_2/picture/DefaultMaterial/diffuseColor.outputs:rgb>
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/hint3.jpg@
                        float2 inputs:st.connect = </Root/StaticFurniture/Picture_Frame_2/picture/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/StaticFurniture/Picture_Frame_2/picture/DefaultMaterial.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }
        }

        def "Indoor_Plant_with_pot_a" (
            active = true
            references = @WhiteMyth/model/Indoor_Plant_with_pot_a.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.05, 0.05, 0.05)
            float3 xformOp:translate = (-7.567941, 0.047985286, -6.6063123)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "_181f48d75314c8586c911d1188889fe_fbx"
                    {
                        over "RootNode"
                        {
                            over "Pot_A"
                            {
                                over "Pot_A_Pot_A_0"
                                {
                                    over "Pot_A_Pot_A_0"
                                    {
                                        float3 xformOp:translate = (0, 0, 0)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        def RealityKitComponent "Collider"
                                        {
                                            uint group = 1
                                            uniform token info:id = "RealityKit.Collider"
                                            uint mask = 4294967295
                                            token type = "Default"

                                            def RealityKitStruct "Shape"
                                            {
                                                float3 extent = (0.55, 0.55, 0.5)
                                                token shapeType = "Box"

                                                def RealityKitStruct "pose"
                                                {
                                                    float3 position = (0, 0, 0.2699417)
                                                }
                                            }
                                        }

                                        def RealityKitComponent "RigidBody"
                                        {
                                            bool gravityEnabled = 0
                                            uniform token info:id = "RealityKit.RigidBody"
                                            bool isCCDEnabled = 0
                                            bool lockRotationX = 1
                                            bool lockRotationY = 1
                                            bool lockRotationZ = 1
                                            bool lockTranslationX = 1
                                            bool lockTranslationY = 1
                                            bool lockTranslationZ = 1
                                            token motionType = "Static"

                                            def RealityKitStruct "massFrame"
                                            {
                                                def RealityKitStruct "m_pose"
                                                {
                                                }
                                            }

                                            def RealityKitStruct "material"
                                            {
                                                double dynamicFriction = 0.6
                                                double staticFriction = 0.6
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        def "Snacksinabox" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0, 1.5707964)
            }
            references = @WhiteMyth/model/Snacksinabox.usdz@
        )
        {
            quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
            float3 xformOp:scale = (0.005999999, 0.005999999, 0.005999999)
            float3 xformOp:translate = (-7.6031823, 4.0701423, -0.20719881)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Old_Bed" (
            active = true
            references = @Old_Bed.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.08, 0.08, 0.08)
            float3 xformOp:translate = (6.6801667, -0.5318588, -2.8804545)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (78.63655, 16, 175.57343)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0, 34.136288, -0.0000038146973)
                    }
                }
            }

            over "Meshes"
            {
                reorder nameChildren = ["invis", "Sketchfab_model"]
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (0.0005874634, 7.747566, -0.0005493164)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Cube "invis" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    customData = {
                        float3 rotationEulerHint = (-0.8191915, 4.8120364e-7, 3.7374326e-7)
                    }
                )
                {
                    rel material:binding = </Root/StaticFurniture/Old_Bed/Meshes/invis/DefaultMaterial> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.2
                    float2 ui:nodegraph:node:pos = (-419.65826, 87.94941)
                    int ui:nodegraph:node:stackingOrder = 1
                    quatf xformOp:orient = (0.9172819, -0.39823857, 1.462802e-7, 2.6723086e-7)
                    float3 xformOp:scale = (4, 2, 0.2)
                    float3 xformOp:translate = (0.009912432, 0.48003, -0.6947274)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Material "DefaultMaterial"
                    {
                        token outputs:mtlx:surface
                        token outputs:realitykit:vertex
                        token outputs:surface.connect = </Root/StaticFurniture/Old_Bed/Meshes/invis/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                        def Shader "DefaultSurfaceShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            float inputs:clearcoatRoughness = 0.01
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 1
                            float inputs:opacity = 0
                            float inputs:roughness = 0
                            token outputs:surface
                        }
                    }

                    def RealityKitComponent "Collider"
                    {
                        uint group = 1
                        uniform token info:id = "RealityKit.Collider"
                        uint mask = 4294967295
                        token type = "Default"

                        def RealityKitStruct "Shape"
                        {
                            float3 extent = (0.2, 0.2, 0.2)
                            token shapeType = "Box"

                            def RealityKitStruct "pose"
                            {
                            }
                        }
                    }

                    def RealityKitComponent "RigidBody"
                    {
                        bool gravityEnabled = 0
                        uniform token info:id = "RealityKit.RigidBody"
                        bool lockRotationX = 1
                        bool lockRotationY = 1
                        bool lockRotationZ = 1
                        bool lockTranslationX = 1
                        bool lockTranslationY = 1
                        bool lockTranslationZ = 1
                        token motionType = "Static"

                        def RealityKitStruct "massFrame"
                        {
                            def RealityKitStruct "m_pose"
                            {
                            }
                        }

                        def RealityKitStruct "material"
                        {
                        }
                    }
                }

                def Cube "invis_1" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                )
                {
                    rel material:binding = </Root/StaticFurniture/Old_Bed/Meshes/invis_1/DefaultMaterial> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.2
                    float2 ui:nodegraph:node:pos = (-399.65826, 107.94941)
                    int ui:nodegraph:node:stackingOrder = 2
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (4, 2, 0.5)
                    float3 xformOp:translate = (0.009900392, 0.46978965, -0.82056606)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def Material "DefaultMaterial"
                    {
                        token outputs:mtlx:surface
                        token outputs:realitykit:vertex
                        token outputs:surface.connect = </Root/StaticFurniture/Old_Bed/Meshes/invis_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                        def Shader "DefaultSurfaceShader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            color3f inputs:diffuseColor = (1, 1, 1)
                            float inputs:metallic = 1
                            float inputs:opacity = 0
                            float inputs:roughness = 0
                            token outputs:surface
                        }
                    }

                    def RealityKitComponent "Collider"
                    {
                        uint group = 1
                        uniform token info:id = "RealityKit.Collider"
                        uint mask = 4294967295
                        token type = "Default"

                        def RealityKitStruct "Shape"
                        {
                            float3 extent = (0.2, 0.2, 0.2)
                            token shapeType = "Box"

                            def RealityKitStruct "pose"
                            {
                            }
                        }
                    }

                    def RealityKitComponent "RigidBody"
                    {
                        bool gravityEnabled = 0
                        uniform token info:id = "RealityKit.RigidBody"
                        bool lockRotationX = 1
                        bool lockRotationY = 1
                        bool lockRotationZ = 1
                        bool lockTranslationX = 1
                        bool lockTranslationY = 1
                        bool lockTranslationZ = 1
                        token motionType = "Static"

                        def RealityKitStruct "massFrame"
                        {
                            def RealityKitStruct "m_pose"
                            {
                            }
                        }

                        def RealityKitStruct "material"
                        {
                        }
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.5
                    double restitution = 0.01
                    double staticFriction = 0.5
                }
            }
        }
    }

    def Scope "Ceiling" (
        active = true
    )
    {
        reorder nameChildren = ["Material", "ceiling", "ceilinglight", "ceiling_snow"]
        def Cube "ceiling" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "Ceiling_Light"]
            rel material:binding = </Root/Ceiling/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (100, 0.99999994, 100)
            float3 xformOp:translate = (0, 18.9, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Ceiling/ceiling/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Ceiling/ceiling/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Ceiling/ceiling/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def "Ceiling_Light" (
                active = true
                references = @WhiteMyth/model/Ceiling_Light.usdz@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.00009999999, 0.01, 0.00009999999)
                float3 xformOp:translate = (0, -0.13607407, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "ceilinglight"
        {
            quatf xformOp:orient = (0.99999994, 0, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (0, 18.502285, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "PointLight"
            {
                float attenuationFalloffExponent = 0.5
                float attenuationRadius = 100
                token info:id = "RealityKit.PointLight"
                float intensity = 5000
            }
        }

        def Cube "ceiling_snow" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "Fence_Wood_1", "VFXEmitter"]
            rel material:binding = </Root/Ceiling/ceiling_snow/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (149.99997, 0.99999964, 200)
            float3 xformOp:translate = (-0.0000011548402, 22.914394, 2.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Ceiling/ceiling_snow/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:metallic = 1
                    normal3f inputs:normal = (0, 0, 1)
                    float inputs:opacity = 0
                    float inputs:roughness = 0
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floormaterial.jpg@
                    float2 inputs:st.connect = </Root/Ceiling/ceiling_snow/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Ceiling/ceiling_snow/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "VFXEmitter"
            {
                uniform token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    int64 burstCount = 200
                    double emissionDuration = 1
                    double emissionDurationVariation = 0
                    double idleDuration = 0
                    double idleDurationVariation = 0
                    bool isLocal = 0
                    bool isLocalFields = 0
                    bool loops = 1
                    float particleSpeed = -0.5
                    float spawnVelocityFactor = 1
                    double warmupDuration = 0

                    def RealityKitStruct "mainEmitter"
                    {
                        float birthRate = 300
                        float4 endColorA = (0.0013006331, 0.032195132, 1, 1)
                        float noiseAnimationSpeed = 0.05
                        float noiseScale = 0.05
                        float noiseStrength = 0.05
                        token opacityOverLife = "LinearFadeOut"
                        double particleLifeSpan = 9
                        float particleMass = 1
                        float sizeMultiplierAtEndOfLifespan = 0.8
                        float4 startColorA = (0.9999908, 1, 1, 1)
                        float4 startColorB = (1, 1, 1, 1)
                        bool useEndColor = 0
                        bool useEndColorRange = 0
                        bool useStartColorRange = 0
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }
        }

        def Material "Material"
        {
            token outputs:mtlx:surface.connect = </Root/Ceiling/Material/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Ceiling/Material/HSVAdjust.outputs:out>
                float inputs:metallic
                float inputs:opacity
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (93.5, 100.5)
                int ui:nodegraph:node:stackingOrder = 2
            }

            def Shader "HSVAdjust"
            {
                uniform token info:id = "ND_hsvadjust_color3"
                float3 inputs:amount = (0, 1, 0.8)
                color3f inputs:in.connect = </Root/Ceiling/Material/Image.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-160.24802, 288.27573)
                int ui:nodegraph:node:stackingOrder = 29
            }

            def Shader "Image"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @WhiteMyth/texture/abstract-gray-concrete-wall-background.jpg@
                string inputs:filtertype
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-418.34775, 83.75445)
                int ui:nodegraph:node:stackingOrder = 14
            }
        }
    }

    def Scope "MovableItems" (
        active = true
    )
    {
        reorder nameChildren = ["doorkey", "paper", "battery", "dresserkey", "hammer", "iphone", "lighter", "lighter"]
        def "doorkey" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.570796, 1.5707963, 0)
            }
            references = @doorkey.usdz@
        )
        {
            quatf xformOp:orient = (0.5, -0.5, 0.5, 0.5)
            float3 xformOp:scale = (0.0029999996, 0.0029999996, 0.0029999996)
            float3 xformOp:translate = (1.3719267, 0.45330226, -6.8543763)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (85.32535, 188.8411, 12.094473)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.619606, 22.26102, -0.0000026226044)
                    }
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def Cube "paper" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, -0.52359885, 0)
            }
        )
        {
            rel material:binding = </Root/MovableItems/paper/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (0.96592575, 0, -0.25881913, 0)
            float3 xformOp:scale = (4.9999995, 0.019999998, 2.9999998)
            float3 xformOp:translate = (-8.840135, 5.0868235, 0.36021754)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/MovableItems/paper/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/MovableItems/paper/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @WhiteMyth/texture/xvi.jpg@
                    float2 inputs:st.connect = </Root/MovableItems/paper/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/MovableItems/paper/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1

                def RealityKitStruct "massFrame"
                {
                    float3 m_inertia = (0.04, 0.04, 0.04)
                    float m_mass = 0.03

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.2
                    double staticFriction = 0.2
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "battery" (
            active = true
            references = @WhiteMyth/model/AA_Battery.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.06, 0.06, 0.06)
            float3 xformOp:translate = (-8.467713, 2.0955126, -3.2552602)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (6.6752467, 4.4928484, 4.473871)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (2.792031, 1.9591256, 1.5007515)
                    }
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "dresserkey" (
            active = true
            references = @WhiteMyth/model/Key_with_Tag.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.09999998, 0.09999998, 0.09999998)
            float3 xformOp:translate = (-1.4832981, -0.8444014, 0.14278962)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (5.0369797, 0.95423627, 14.397755)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.7485869, 0.389942, 0.44823956)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                bool lockRotationX = 0
                bool lockTranslationX = 0
                bool lockTranslationY = 0

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 0.1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.4
                    double restitution = 0.05
                    double staticFriction = 0.4
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "hammer" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.0358242, 8.940697e-8, -1.5394278)
            }
            references = @WhiteMyth/model/Hammer.usdz@
        )
        {
            quatf xformOp:orient = (0.62393314, -0.35551256, 0.344532, -0.6046619)
            float3 xformOp:scale = (0.05, 0.05, 0.05)
            float3 xformOp:translate = (6.434096, 0.36904827, -2.538613)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (2.4, 37, 14.5)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0.00013637543, -1.2163525, -0.69519234)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 1
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1
                bool lockRotationY = 0
                bool lockRotationZ = 0

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 1

                    def RealityKitStruct "m_pose"
                    {
                        quatf orientation = (1, 0, 0, 0)
                        float3 position = (0, 12, -1.5)
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.4
                    double restitution = 0.02
                    double staticFriction = 0.4
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["thump"]
                    rel values = </Root/SFX/thump_wav>
                }
            }

            over "Meshes" (
                customData = {
                    float3 rotationEulerHint = (0.6981317, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (0.9396926, 0.34202012, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (0.00013637544, -11.46, -9.741651)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "iphone" (
            active = true
            customData = {
                float3 rotationEulerHint = (0.34906587, -4.4703484e-8, 1.1178406)
            }
            references = @iphone.usdz@
        )
        {
            quatf xformOp:orient = (0.8349477, 0.14722387, 0.092080615, 0.5222152)
            float3 xformOp:scale = (0.004, 0.004, 0.004)
            float3 xformOp:translate = (-8.096311, 4.145354, 0.41055545)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "Iphone_001_1" (
                                active = false
                            )
                            {
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (13.40307, 219.7323, 108.605606)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-1.2266798, -0.0000038146973, 0.13624)
                    }
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def Xform "lighter" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.99999964, 0.99999964, 0.99999964)
            float3 xformOp:translate = (-7.4605827, 1.4364902, -6.9990973)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "lighter__" (
                customData = {
                    float3 rotationEulerHint = (1.5707964, 1.5707963, 0)
                }
                references = @WhiteMyth/model/Basic_Lighter.usdz@
            )
            {
                reorder nameChildren = ["strike", "Materials", "Meshes", "Collider", "AudioLibrary"]
                quatf xformOp:orient = (0.5, 0.50000006, 0.49999994, -0.49999994)
                float3 xformOp:scale = (0.0030000017, 0.0030000007, 0.0030000007)
                float3 xformOp:translate = (-0.06537008, 0.0029366016, -0.0008420944)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.65, 0.12, 0.23)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.06574391, -0.004739972, 0.011492815)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                uniform token info:id = "RealityKit.RigidBody"
                bool isCCDEnabled = 1

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 0.1

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.4
                    double restitution = 0.01
                    double staticFriction = 0.4
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["ignite"]
                    rel values = </Root/SFX/lighter_wav>
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }
    }

    def Scope "Interactable" (
        active = true
    )
    {
        reorder nameChildren = ["safe_animated", "dresser", "dresserlock", "door_animated", "anchor_doorlock", "candle", "candlefire", "snowglobe", "window_animated", "switch_window", "switch_light", "photoframe", "cockroach"]
        def "safe_animated" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -1.5707963, 0)
            }
            references = @safe_animated.usdz@
        )
        {
            quatf xformOp:orient = (0.70710677, 0, -0.7071068, 0)
            float3 xformOp:scale = (1.3, 1.3, 1.3)
            float3 xformOp:translate = (1.6861356, -0.5197541, -6.8233895)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (1.8037767, 2.1131752, 1.4136784)
                    float height = 2.1131752
                    float radius = 1.0565876
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.051440686, 1.4995152, 0)
                    }
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["open", "keypad_click"]
                    rel values = [
                        </Root/SFX/vault_wav>,
                        </Root/SFX/beep_wav>,
                    ]
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 10

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "dresser" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @WhiteMyth/model/Dresser.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes", "SkinnedMeshes", "Collider", "InputTarget"]
            quatf xformOp:orient = (0.70710677, 0, 0.7071067, 0)
            float3 xformOp:scale = (0.022, 0.022, 0.022)
            float3 xformOp:translate = (-8.682722, 0.070068665, -1.3361847)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "ea1b8f8f6d7c4225ab4e678f6cf37aa9_fbx"
                    {
                        over "Object_2"
                        {
                            quatf xformOp:orient = (1, 0, 0, 0)
                            float3 xformOp:scale = (1, 1, 1)
                            float3 xformOp:translate = (0, 0, 0)
                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                            over "RootNode"
                            {
                                over "Object_4"
                                {
                                    over "Object001"
                                    {
                                        quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                        float3 xformOp:scale = (1, 1.0000001, 1.0000001)
                                        float3 xformOp:translate = (-0.000091552734, 441.99997, 0.000002781579)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        over "Object_18"
                                        {
                                            quatf xformOp:orient = (1, 0, 0, 0)
                                            float3 xformOp:scale = (1, 1, 1)
                                            float3 xformOp:translate = (340, -390.00006, 419.99997)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                            over "Object001_Tumb_0"
                                            {
                                                quatf xformOp:orient = (1, 0, 0, 0)
                                                float3 xformOp:scale = (1, 1, 1)
                                                float3 xformOp:translate = (0, 0, 0)
                                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                                over "Object001_Tumb_0"
                                                {
                                                    float3 xformOp:translate = (0, 0, 0)
                                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "SkinnedMeshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.2555575, 0.2555575, 0.2555575)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "ea1b8f8f6d7c4225ab4e678f6cf37aa9_fbx"
                    {
                        over "Object_2"
                        {
                            over "RootNode"
                            {
                                over "Object_4"
                                {
                                    over "_rootJoint"
                                    {
                                        over "skin0"
                                        {
                                            reorder nameChildren = ["skeleton", "Take_001", "Object003_Fasad_0", "Object092_Fasad_0", "Object094_Fasad_0", "Object219_Napr_0"]
                                            over "skeleton"
                                            {
                                                float3 xformOp:translate = (0, 0, 0)
                                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (256.0686, 225.91278, 115.23196)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.000022888184, 112.956375, 2.9266472)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.4
                    double staticFriction = 0.4
                }
            }
        }

        def "dresserlock" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 0.8726645, 0)
            }
            references = @WhiteMyth/model/Lock_And_Key.usdz@
        )
        {
            quatf xformOp:orient = (0.9063078, 0, 0.4226182, 0)
            float3 xformOp:scale = (0.02, 0.020000001, 0.02)
            float3 xformOp:translate = (-7.3788295, 3.935375, -1.4878078)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["unlock"]
                    rel values = </Root/SFX/key_wav>
                }
            }
        }

        def "door_animated" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -1.5707963, 0)
            }
            references = @door_animated.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes", "Collider"]
            quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
            float3 xformOp:scale = (0.05999999, 0.05999999, 0.05999999)
            float3 xformOp:translate = (-10, 0, 4.9915037)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "b37afcbbf8564243bc40699160c032e0_fbx"
                    {
                        over "Object_2"
                        {
                            over "RootNode"
                            {
                                over "Plane" (
                                    active = false
                                )
                                {
                                }

                                over "Plane_004" (
                                    active = false
                                )
                                {
                                }
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (96.53779, 205.01837, 25.90781)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.0000038146973, 102.509155, 3.9924145)
                    }
                }
            }

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitClipDefinition "Clip_default_subtree_animation"
                {
                    uniform string[] clipNames = ["open", "close"]
                    uniform string sourceAnimationName = "default subtree animation"
                    uniform double[] startTimes = [0, 4.146888888888889]
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double restitution = 0.1
                }
            }
        }

        def "candle" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 2.1713371, 0)
            }
            references = @WhiteMyth/model/Just_a_Candle.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes"]
            rel material:binding = None (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (0.46632123, 0, 0.8846154, 0)
            float3 xformOp:scale = (0.0049999994, 0.0049999994, 0.0049999994)
            float3 xformOp:translate = (1.4476032, 4.977586, -8.06998)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "BezierCurve_001_5"
                            {
                            }

                            over "_4_04_1_001_4" (
                                active = false
                            )
                            {
                            }

                            over "_4_04_1_002_3" (
                                active = false
                            )
                            {
                            }

                            over "_4_04_1_2" (
                                active = false
                            )
                            {
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (120, 230, 130)
                    float height = 248.36281
                    float radius = 81.57518
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0.26971054, 124.271095, -2.521656)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.3
                    double restitution = 0.1
                    double staticFriction = 0.3
                }
            }
        }

        def "snowglobe" (
            active = true
            references = @WhiteMyth/model/SnowGlobe.usda@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (5, 5, 5)
            float3 xformOp:translate = (-3.9718125, 4.9603744, -7.582679)

            over "base_with_smart_uv" (
                active = false
            )
            {
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.29868275, 0.26803192, 0.29868275)
                    float height = 0.4
                    float radius = 0.14934137
                    token shapeType = "Sphere"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.00046154857, 0.13737477, 0.003406614)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 0.5

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.3
                    double restitution = 0.1
                    double staticFriction = 0.3
                }
            }
        }

        def "window_animated" (
            active = true
            references = @WhiteMyth/model/Animated_Window_Systems.usdz@
        )
        {
            reorder nameChildren = ["Sphere", "Materials", "Meshes", "AnimationLibrary"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.06, 0.06, 0.06)
            float3 xformOp:translate = (-1.2598422, 7.1939607, 9.572421)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (100, 100, 100)
                float3 xformOp:translate = (-115.319496, 505.267, 649.6759)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Sketchfab_model"
                {
                    over "c6e3e68a8e60493d934f2d46f3ca3045_fbx"
                    {
                        over "Object_2"
                        {
                            over "RootNode"
                            {
                                quatf xformOp:orient = (1, 0, 0, 0)
                                float3 xformOp:scale = (1, 1, 1)
                                float3 xformOp:translate = (341.02063, -1599.9602, -1789.0922)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                over "fixed" (
                                    active = false
                                )
                                {
                                }

                                over "fixed_lattice" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fincontrol" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_frame" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin1" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin2" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin3" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin4" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin5" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin6" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin7" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin8" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_finc9" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin10" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin11" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin12" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin13" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin14" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin15" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin16" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin17" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_narrow_fin18" (
                                    active = false
                                )
                                {
                                }

                                over "Jalousie_wide_fincontrol"
                                {
                                }

                                over "Jalousie_wide_frame"
                                {
                                }

                                over "Jalousie_wide_fin1"
                                {
                                }

                                over "Jalousie_wide_fin2"
                                {
                                }

                                over "Jalousie_wide_fin3"
                                {
                                }

                                over "Jalousie_wide_fin4"
                                {
                                }

                                over "Jalousie_wide_fin5"
                                {
                                }

                                over "Jalousie_wide_fin6"
                                {
                                }

                                over "Jalousie_wide_fin7"
                                {
                                }

                                over "Jalousie_wide_fin8"
                                {
                                }

                                over "Jalousie_wide_fin9"
                                {
                                }

                                over "sliding_vertical_frame" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_vertical_windowT" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_vertical_windowB" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_frame" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_windowL" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_windowR" (
                                    active = false
                                )
                                {
                                }

                                over "holding_frame" (
                                    active = false
                                )
                                {
                                }

                                over "holding_panels" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_4panels_frame" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_4panels_windowL2" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_4panels_windowL1" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_4panels_windowR1" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_4panels_windowR2" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_lattice_frame" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_lattice_windowL" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_horizontal_lattice_windowR" (
                                    active = false
                                )
                                {
                                }

                                over "casement_frame" (
                                    active = false
                                )
                                {
                                }

                                over "casement_panelL" (
                                    active = false
                                )
                                {
                                }

                                over "casement_panelR" (
                                    active = false
                                )
                                {
                                }

                                over "casement_bridged_frame" (
                                    active = false
                                )
                                {
                                }

                                over "casement_bridged_panelL" (
                                    active = false
                                )
                                {
                                }

                                over "casement_bridged_panelR" (
                                    active = false
                                )
                                {
                                }

                                over "awning_frame" (
                                    active = false
                                )
                                {
                                }

                                over "awning_armature" (
                                    active = false
                                )
                                {
                                }

                                over "awning_lattice_frame" (
                                    active = false
                                )
                                {
                                }

                                over "awning_lattice_armature" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_panel" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_frame" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_handle" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_lattice_window" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_lattice_panel" (
                                    active = false
                                )
                                {
                                }

                                over "pivoting_lattice_frame" (
                                    active = false
                                )
                                {
                                }

                                over "revolving_frame" (
                                    active = false
                                )
                                {
                                }

                                over "revolving_door" (
                                    active = false
                                )
                                {
                                }

                                over "sliding_vertical_lattice_windowT" (
                                    active = false
                                )
                                {
                                    quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                    float3 xformOp:scale = (100, 100, 100)
                                    float3 xformOp:translate = (-167.89592, 1288.5945, -7.4526625)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }

                                over "sliding_vertical_lattice_frame" (
                                    active = false
                                )
                                {
                                    quatf xformOp:orient = (0.7071067, -0.7071068, 0, 0)
                                    float3 xformOp:scale = (100, 100, 100)
                                    float3 xformOp:translate = (-167.87091, 1168.4429, -12.5832405)
                                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                }

                                over "sliding_vertical_lattice_windowB" (
                                    active = false
                                )
                                {
                                    over "sliding_vertical_lattice_windowB_glass_0"
                                    {
                                        quatf xformOp:orient = (1, 0, 0, 0)
                                        float3 xformOp:scale = (1, 1, 1)
                                        float3 xformOp:translate = (0, 0, 0)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                    }

                                    over "sliding_vertical_lattice_windowB_frame2_0"
                                    {
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "Materials"
            {
                over "glass"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        float inputs:opacity = 1
                    }
                }
            }

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitClipDefinition "Clip_default_subtree_animation"
                {
                    uniform string[] clipNames = ["open", "close"]
                    uniform string sourceAnimationName = "default subtree animation"
                    uniform double[] startTimes = [0, 2.021777777777778]
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["turn"]
                    rel values = </Root/SFX/blinds_wav>
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (77.01409, 98.47671, 7.5823574)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0.043491364, 10.483974, 7.4263687)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double restitution = 0.1
                }
            }
        }

        def "switch_window" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 3.1415927, 0)
            }
            references = @WhiteMyth/model/Modern_Light_Switches.usdz@
        )
        {
            quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
            float3 xformOp:scale = (0.06, 0.06, 0.06)
            float3 xformOp:translate = (-4.754751, 6.1004076, 9.909228)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitClipDefinition "Clip_default_subtree_animation"
                {
                    uniform string[] clipNames = ["on", "off"]
                    uniform string sourceAnimationName = "default subtree animation"
                    uniform double[] startTimes = [0, 0.9650555555555556]
                }
            }

            over "SkinnedMeshes"
            {
                over "Sketchfab_model"
                {
                    over "_572851d0f89418da7ff6d56e583ab61_fbx"
                    {
                        over "Object_2"
                        {
                            over "RootNode"
                            {
                                over "Object_4"
                                {
                                    over "_rootJoint"
                                    {
                                        over "skin0"
                                        {
                                            float3 xformOp:translate = (3.6205025, 0, -0.00008010864)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                            over "wallplate_metal_02___Default_0" (
                                                active = false
                                            )
                                            {
                                                float3 xformOp:translate = (0, 0, 0)
                                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                            }

                                            over "wallplate_plastic001_01___Default_0"
                                            {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (13.70947, 21.7433, 5.0248737)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0.041469097, 10.837724, 1.1510781)
                    }
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["switch"]
                    rel values = </Root/SFX/switch_wav>
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "switch_light" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @WhiteMyth/model/Modern_Light_Switches.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (-126.125, 109)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.05999999, 0.05999999, 0.05999999)
            float3 xformOp:translate = (-9.913357, 6.1, 1.1543391)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"

                def RealityKitClipDefinition "Clip_default_subtree_animation"
                {
                    uniform string[] clipNames = ["on", "off"]
                    uniform string sourceAnimationName = "default subtree animation"
                    uniform double[] startTimes = [0, 0.9650555555555556]
                }
            }

            over "SkinnedMeshes"
            {
                over "Sketchfab_model"
                {
                    over "_572851d0f89418da7ff6d56e583ab61_fbx"
                    {
                        over "Object_2"
                        {
                            over "RootNode"
                            {
                                over "Object_4"
                                {
                                    over "_rootJoint"
                                    {
                                        quatf xformOp:orient = (1, 0, 0, 0)
                                        float3 xformOp:scale = (1, 1, 1)
                                        float3 xformOp:translate = (-3.6893997, 0, -0.0002822876)
                                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                        over "skin0"
                                        {
                                            float3 xformOp:translate = (0, 0, 0)
                                            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                                            over "wallplate_metal_02___Default_0"
                                            {
                                                float3 xformOp:translate = (0, 0, 0)
                                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                                            }

                                            over "wallplate_plastic001_01___Default_0" (
                                                active = false
                                            )
                                            {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (13.70947, 21.7433, 5.0248737)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (0, 10.837724, 1.1510781)
                    }
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["switch"]
                    rel values = </Root/SFX/switch_wav2>
                }
            }

            def RealityKitCustomComponent "RealityKitContent_HasHoverEffectComponent"
            {
                uniform token info:id = "RealityKitContent.HasHoverEffectComponent"
            }
        }

        def "photoframe" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -0.69813174, 0)
            }
            references = @WhiteMyth/model/Frame_3D.usdz@
        )
        {
            reorder nameChildren = ["secondphoto", "Materials", "Meshes"]
            quatf xformOp:orient = (0.9396926, 0, -0.34202012, 0)
            float3 xformOp:scale = (0.005, 0.0049999994, 0.005)
            float3 xformOp:translate = (-8.939784, 5.026952, -3.381839)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                reorder nameChildren = ["Material_001", "Material_002_", "frame", "glass", "Metallic", "cardboard"]
                over "Material_001"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Interactable/photoframe/Materials/Material_001/diffuseColor.outputs:rgb>
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/photo1.jpg@
                        float2 inputs:st.connect = </Root/Interactable/photoframe/Materials/Material_001/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Interactable/photoframe/Materials/Material_001.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }

                over "frame"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "glass"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "pbr_shader"
                    {
                        float inputs:metallic = 1
                        float inputs:opacity = 0.15
                    }
                }
            }

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "root"
                    {
                        over "GLTF_SceneRootNode"
                        {
                            over "Plane_0"
                            {
                                quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                                float3 xformOp:scale = (1, 1, 1)
                                float3 xformOp:translate = (0.2140615, 1.3318932, 0)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "Plane_001_1"
                            {
                                quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                                float3 xformOp:scale = (1, 1, 1)
                                float3 xformOp:translate = (0.2140615, 1.3318932, -0.0032769525)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }

                            over "Plane_002_2"
                            {
                                quatf xformOp:orient = (0.59441227, 0, 0, 0.8041604)
                                float3 xformOp:scale = (1.0118885, 1.0118885, 1.0118885)
                                float3 xformOp:translate = (0.22100092, 1.3340225, 0)
                                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                            }
                        }
                    }
                }
            }

            def Cube "secondphoto" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.2740905, 1.5707963, 0)
                }
            )
            {
                rel material:binding = </Root/Interactable/photoframe/secondphoto/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (0.5684126, 0.42060328, 0.56841266, -0.42060325)
                float3 xformOp:scale = (1000, 0.32500002, 1290)
                float3 xformOp:translate = (21.522827, 133.39087, -0.007019043)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Interactable/photoframe/secondphoto/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (0, 0, 0) (
                            colorSpace = "lin_srgb"
                        )
                        color3f inputs:diffuseColor.connect = </Root/Interactable/photoframe/secondphoto/DefaultMaterial/diffuseColor.outputs:rgb>
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }

                    def Shader "diffuseColor"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @WhiteMyth/texture/photo2_.jpg@
                        float2 inputs:st.connect = </Root/Interactable/photoframe/secondphoto/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                        color3f outputs:rgb

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Interactable/photoframe/secondphoto/DefaultMaterial.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (168.2597, 267.89075, 222.00418)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-17.316128, 133.1893, -0.3276863)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"
                bool lockRotationX = 1
                bool lockRotationY = 1
                bool lockRotationZ = 1
                bool lockTranslationX = 1
                bool lockTranslationY = 1
                bool lockTranslationZ = 1
                token motionType = "Static"

                def RealityKitStruct "massFrame"
                {
                    float m_mass = 0.2

                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                    double dynamicFriction = 0.3
                    double restitution = 0.1
                    double staticFriction = 0.3
                }
            }
        }

        def "cockroach" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.9198616, 0)
            }
            references = @WhiteMyth/model/Cockroach.usdz@
        )
        {
            quatf xformOp:orient = (0.5735765, 0, 0.81915194, 0)
            float3 xformOp:scale = (0.0015000002, 0.0015000002, 0.0015000002)
            float3 xformOp:translate = (-8.059289, 3.9448953, 0.4177384)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "anchor_doorlock" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Interactable/anchor_doorlock/DefaultMaterial>
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.09999998, 0.09999998, 0.09999998)
            float3 xformOp:translate = (-10.321051, 5.839193, 7.6144495)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Interactable/anchor_doorlock/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["open"]
                    rel values = </Root/SFX/door_wav>
                }
            }
        }

        def Xform "candlefire" (
            customData = {
                float3 rotationEulerHint = (0, 2.1713371, 0)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (0.46632123, 0, 0.8846154, 0)
            float3 xformOp:scale = (5, 5, 5)
            float3 xformOp:translate = (1.4462138, 6.2265496, -8.096544)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "VFXEmitter"
            {
                token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    token birthDirection = "Normal"
                    int64 burstCount = 500
                    double emissionDuration = 1
                    token emitterShape = "Cone"
                    bool isEmitting = 1
                    bool isLocal = 1
                    bool isLocalFields = 1
                    float particleSpeed = 0.01
                    float3 shapeSize = (0.04, 0.04, 0.04)
                    bool spawnInheritParentColor = 0
                    token spawnOccasion = "OnDeath"

                    def RealityKitStruct "mainEmitter"
                    {
                        token billboardMode = "Billboard"
                        float birthRate = 100
                        token blendMode = "Alpha"
                        float colorEvolutionPower = 1
                        float4 endColorA = (0.96828645, 0.7533718, 0.01695968, 1)
                        bool isLightingEnabled = 0
                        float noiseAnimationSpeed = 0
                        float noiseScale = 1
                        float noiseStrength = 0.05
                        token opacityOverLife = "Constant"
                        float particleAngle = 0
                        double particleLifeSpan = 2
                        float particleSize = 0.01
                        float3 radialGravityCenter = (0, 1, 0)
                        float radialGravityStrength = 0.05
                        float sizeMultiplierAtEndOfLifespan = 0.5
                        float4 startColorA = (1, 0.030250736, 0, 1)
                        bool useEndColor = 1
                        bool useEndColorRange = 0
                        bool useStartColorRange = 0
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["fire"]
                    rel values = </Root/SFX/fire_wav>
                }
            }
        }
    }

    def Scope "SFX" (
        active = true
    )
    {
        reorder nameChildren = ["blinds_wav", "switch_wav", "switch_wav2", "fire_wav", "vault_wav", "beep_wav", "door_wav", "key_wav", "thump_wav", "crack_wav", "lighter_wav"]
        def RealityKitAudioFile "blinds_wav"
        {
            uniform asset file = @WhiteMyth/sfx/blinds.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "switch_wav"
        {
            uniform asset file = @WhiteMyth/sfx/switch.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "switch_wav2"
        {
            uniform asset file = @WhiteMyth/sfx/switch.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "fire_wav"
        {
            uniform asset file = @WhiteMyth/sfx/fire.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "vault_wav"
        {
            uniform asset file = @WhiteMyth/sfx/vault.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "beep_wav"
        {
            uniform asset file = @WhiteMyth/sfx/beep.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "door_wav"
        {
            uniform asset file = @WhiteMyth/sfx/door.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "key_wav"
        {
            uniform asset file = @WhiteMyth/sfx/key.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "thump_wav"
        {
            uniform asset file = @WhiteMyth/sfx/thump.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "crack_wav"
        {
            uniform asset file = @WhiteMyth/sfx/crack.wav@
            uniform bool shouldLoop = 0
        }

        def RealityKitAudioFile "lighter_wav"
        {
            uniform asset file = @WhiteMyth/sfx/lighter.wav@
            uniform bool shouldLoop = 0
        }
    }

    def "DUMMY" (
        active = false
        references = @Roblox_RTHRO_Dummy.usdz@
    )
    {
        float3 xformOp:scale = (0.05, 0.05, 0.05)
        float3 xformOp:translate = (0, 0.14034277, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

